@model IEnumerable<csharp_lend_pc.Models.EmployeeEntity>;
@{
    ViewData["Title"] = "社員一覧";
    int currentDisplayNum = ViewData["currentDisplayNum"] != null ? Int32.Parse(ViewData["currentDisplayNum"].ToString()) : 5;
    int currentPage =  ViewData["currentPage"] != null ? Int32.Parse(ViewData["currentPage"].ToString()) : 1;
    string word = ViewData["currentWord"] != null ? ViewData["currentWord"].ToString() : "";
    string types = ViewData["currentTypes"] != null ? ViewData["currentTypes"].ToString() : "";
    int nextPage = currentPage + 1;
    int prevPage = currentPage - 1;
    int lastPage = ViewData["lastPage"] != null ?  Int32.Parse(ViewData["lastPage"].ToString()) : 1;

    string wordQuery = word != "" ? $"&word={word}" : "";
    string typesQuery = types != "" ? $"&types={types}" : "";


    var selectListDisplayNum = new int[] {1,3,5};
    var filtersDic = new Dictionary<string, string>()
        {
            {"all", "ALL"}, {"isRetired" , "退職者"}, {"notRetired", "未退職者"}
        };
    var tableColumnsValue = new string[] { "all", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13" };
    var tableColumnsLabel = new string[] { "ALL", "氏名", "氏名（カナ）", "電話番号", "メールアドレス", "年齢", "性別", "役職", "PCアカウント権限", "登録日",
"更新日", "退職日" };

}
@functions {
    private void getCurrentInputHidden(string word, string types, int? pageNo, int? displayNum )
    {
        if(pageNo != null) {
            <input type="hidden" name="pageNo" value="@pageNo" />
        }
        if(displayNum != null) {
            <input type="hidden" name="displayNum" value="@displayNum" />
        }
        if(word != null && word != "") {
            <input type="hidden" name="word" value="@word">
        }
        if(types != null && types != "") {
            <input type="hidden" name="types" value="@types">
        }
    }
}
<div class="col-10 d-flex justify-content-between align-items-center">
    <h1>社員一覧</h1>
    <a class="button_add" href="/employee/add">新規追加</a>
</div>

<div class="col-10 d-flex mt-5 justify-content-between align-items-center">
    <form method="get" class="col-4 px-0">
        <div class="input-group search_form px-0">
            @{
                getCurrentInputHidden("", types, null,currentDisplayNum);
            }
            <input type="text" name="word" class="form-control" placeholder="社員番号または氏名を入力してください" value="@word">
            <div class="input-group-append">
                <button class="btn btn-secondary" type="submit">
                    <img src="/img/search.svg" alt="search">
                </button>
            </div>
        </div>
    </form>
    <div class="d-flex justify-content-end">
         <div class="dropdown filter_dropdown">
            <button class="btn dropdown-toggle button_filter" type="button" id="dropdownMenuButton"
                data-toggle="dropdown" aria-expanded="false">
            </button>
            <div class="dropdown-menu px-2">
                <form method="get">
                @foreach (var item in filtersDic)
                {
                    bool isChecked = (item.Key == types) || item.Key == "all";

                    <div class="form-check">
                        <input name="types" class="form-check-input" type="radio" id="isBrokenRadio1" value="@item.Key" onchange="submit(this.form)" checked="@isChecked" />
                        <label class="form-check-label" for="types">@item.Value</label>
                    </div>
                }
                @{getCurrentInputHidden(word,"",null,currentDisplayNum);}
                </form>  
            </div>                      
        </div>
        <div class="dropdown table_dropdown">
            <button class="btn dropdown-toggle button_table" type="button" id="dropdownMenuButton"
                data-toggle="dropdown" aria-expanded="false">
            </button>
            <ul class="dropdown-menu px-2 not-close-dropdown-menu">
                @for (var j = 0; j < tableColumnsValue.Length; j++)
                {
                    if (tableColumnsValue[j] == "all")
                    {
                        <li class="all">
                            <div class="form-check d-flex align-items-center">
                                <label class="form-check-label" for="flexCheckDefault">
                                    <input checked class="form-check-input check-all" type="checkbox" value="@tableColumnsValue[@j]"
                                id="flexCheckDefault">
                                    @tableColumnsLabel[j]
                                </label>
                            </div>
                        </li>
                    }
                    else
                    {
                        <li>
                            <div class="form-check d-flex align-items-center">
                                <label class="form-check-label" for="flexCheckDefault">
                                    <input checked class="form-check-input" type="checkbox" value="@tableColumnsValue[@j]" id="flexCheckDefault">
                                    @tableColumnsLabel[j]
                                </label>
                            </div>
                        </li>
                    }
                }
            </ul>
        </div>
        <form method="get">
            <select name="displayNum" class="form-select form-select-sm select-display-num" aria-label="form-select-sm example" 
            style="width: 70px;height: 100%"  onchange="submit(this.form)">
                @foreach (var displayNum in selectListDisplayNum)
                {
                    var text = displayNum + "件";
                    if(currentDisplayNum == displayNum) {
                        <option value="@displayNum" selected>@text</option>
                    } else {
                        <option value="@displayNum">@text</option>
                    }                    
                }
            </select>
            @{getCurrentInputHidden(word, types, currentPage, null);}
        </form>        
    </div>
</div>

<div class="mt-2 col-10 overflow-auto">
    <table class="table table-striped table-bordered target_table"
        style="table-layout:auto;white-space: nowrap;overflow-x:hidden;">
        <thead>
            <tr>
                <th scope="col">No.</th>
                <th scope="col">社員番号</th>
                <th scope="col">氏名</th>
                <th scope="col">氏名（カナ）</th>
                <th scope="col">電話番号</th>
                <th scope="col">メールアドレス</th>
                <th scope="col">年齢</th>
                <th scope="col">性別</th>
                <th scope="col">役職</th>
                <th scope="col">PCアカウント権限</th>
                <th scope="col">登録日</th>
                <th scope="col">更新日</th>
                <th scope="col">退職日</th>
            </tr>
        </thead>
        <tbody>
            @{
                var i = 0;
                foreach (var employee in Model)
                {
                    i++;
                    var name = $"{employee.LastName} {employee.FirstName}";
                    var nameKana = $"{employee.LastNameKana} {employee.FirstNameKana}";
                    var className = employee.RetiredAt != null ? "bg-danger" : "";
                    <tr class="@className">
                        <td> @i </td>
                        <td>
                            <a href="/employee/detail/@employee.Id">@employee.Id</a>
                        </td>
                        <td> @name</td>
                        <td> @nameKana</td>
                        <td> @employee.TelNumber</td>
                        <td> @employee.Email</td>
                        <td> @employee.Age</td>
                        <td> @employee.Gender</td>
                        <td> @employee.Position</td>
                        <td> @employee.Privilege</td>
                        <td> @Html.DisplayFor(m=>employee.CreatedAt)</td>
                        <td> @Html.DisplayFor(m=>employee.UpdatedAt)</td>
                        <td> @Html.DisplayFor(m=>employee.RetiredAt)</td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

<div class="mt-3 dataTables_paginate paging_input col-10 d-flex justify-content-center align-items-center">
    <form method="get" class="d-flex align-items-center">
        @{
                getCurrentInputHidden(word, types, null,currentDisplayNum);
        }
        <input class="paginate_input" name="pageNo"
        type="tel" style="width: 50px;" value="@currentPage" maxlength="3" oninput="value = value.replace(/[^0-9]+/i,'');">
        <span class="paginate_of mx-2"> / @lastPage</span>
        <div class="btn-group" role="group" aria-label="Basic outlined example">
            @if(currentPage == 1) {            
                <a class="btn btn-outline-primary button_left disabled"  href="#"></a>

            } else {
                <a class="btn btn-outline-primary button_left"  href="/lend?pageNo=@prevPage&displayNum=@currentDisplayNum@wordQuery@typesQuery"></a>
            } 

            @if(currentPage == lastPage) {
                <a class="btn btn-outline-primary button_right disabled" href="#"></a>  
            } else {
                <a class="btn btn-outline-primary button_right" href="/lend?pageNo=@nextPage&displayNum=@currentDisplayNum@wordQuery@typesQuery"></a>
            }         
        </div>        
    </form>    
</div>